generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id              String                    @id @default(cuid())
  name            String                    @unique
  description     String?
  isActive        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  apiKeys         ApiKey[]
  geometryJobs    GeometryProcessingQueue[]
  invitationLinks InvitationLink[]
  users           User[]
}

model User {
  id                   String                    @id @default(cuid())
  name                 String?
  email                String                    @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  organizationId       String?
  role                 UserRole                  @default(MEMBER)
  invitedByUserId      String?
  invitationAcceptedAt DateTime?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  createdApiKeys       ApiKey[]                  @relation("CreatedApiKeys")
  createdGeometryJobs  GeometryProcessingQueue[] @relation("CreatedGeometryJobs")
  usedInvitation       InvitationLink?           @relation("InvitationUsage")
  createdInvitations   InvitationLink[]          @relation("InvitationCreator")
  createdGeometries    NamedGeometry[]
  sessions             Session[]
  invitedBy            User?                     @relation("UserInvitations", fields: [invitedByUserId], references: [id])
  invitedUsers         User[]                    @relation("UserInvitations")
  organization         Organization?             @relation(fields: [organizationId], references: [id])
}

model InvitationLink {
  id              String       @id @default(cuid())
  token           String       @unique @default(cuid())
  email           String?
  expiresAt       DateTime
  usedAt          DateTime?
  organizationId  String
  createdByUserId String
  usedByUserId    String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  usedBy          User?        @relation("InvitationUsage", fields: [usedByUserId], references: [id])
  createdBy       User         @relation("InvitationCreator", fields: [createdByUserId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])
}

model NamedGeometry {
  id                           String                    @id @default(cuid())
  GeometryName                 String                    @unique
  GeometryAlgorithmName        String
  GeometryInputParameterSchema String
  shortDescription             String?
  isActive                     Boolean                   @default(true)
  previewImage                 Bytes?
  previewImageContentType      String?
  previewImageUpdatedAt        DateTime?
  measurementImage             Bytes?
  measurementImageContentType  String?
  measurementImageUpdatedAt    DateTime?
  CreatorID                    String
  CreationTime                 DateTime                  @default(now())
  updatedAt                    DateTime                  @default(now()) @updatedAt
  geometryJobs                 GeometryProcessingQueue[] @relation("NamedGeometryJobs")
  creator                      User                      @relation(fields: [CreatorID], references: [id])

  @@map("NamedGeometry")
}

model ApiKey {
  id             String        @id @default(cuid())
  name           String
  keyHash        String        @unique
  permissions    String
  organizationId String?
  isActive       Boolean       @default(true)
  lastUsedAt     DateTime?
  createdAt      DateTime      @default(now())
  createdBy      String
  creator        User          @relation("CreatedApiKeys", fields: [createdBy], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model GeometryProcessingQueue {
  id                         String        @id @default(cuid())
  GeometryID                 String
  CreatorID                  String
  OwningOrganizationID       String
  CreationTime               DateTime      @default(now())
  GeometryInputParameterData String
  ProcessStartedTime         DateTime?
  ProcessCompletedTime       DateTime?
  isProcessSuccessful        Boolean       @default(false)
  isEnabled                  Boolean       @default(true)
  CustomerNote               String?
  CustomerID                 String?
  objectID                   String?       @unique
  objectIDGeneratedAt        DateTime?
  GeometryFileContents       Bytes?
  GeometryFileName           String?
  PrintFileContents          Bytes?
  PrintFileName              String?
  ProcessingLog              String?
  owningOrganization         Organization  @relation(fields: [OwningOrganizationID], references: [id])
  creator                    User          @relation("CreatedGeometryJobs", fields: [CreatorID], references: [id])
  geometry                   NamedGeometry @relation("NamedGeometryJobs", fields: [GeometryID], references: [id])
  printQueue                 PrintQueue[]
}

model PrintQueue {
  id                        String                  @id @default(cuid())
  GeometryProcessingQueueID String
  PrintStartedTime          DateTime?
  PrintCompletedTime        DateTime?
  isPrintSuccessful         Boolean                 @default(false)
  printNote                 String?
  printAcceptance           Boolean?
  isEnabled                 Boolean                 @default(true)
  CreationTime              DateTime                @default(now())
  progress                  Float?
  progressLastReportTime    DateTime?
  logs                      String?
  geometryProcessingQueue   GeometryProcessingQueue @relation(fields: [GeometryProcessingQueueID], references: [id])
}

enum UserRole {
  SYSTEM_ADMIN
  ORG_ADMIN
  MEMBER
}
