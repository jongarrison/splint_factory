// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users           User[]
  invitationLinks InvitationLink[]
  apiKeys         ApiKey[]
  geometryJobs    GeometryProcessingQueue[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  
  // Organization fields
  organizationId       String?
  role                 UserRole  @default(MEMBER)
  
  // Invitation tracking (Phase 2)
  invitedByUserId     String?
  invitationAcceptedAt DateTime?
  
  sessions            Session[]
  organization        Organization? @relation(fields: [organizationId], references: [id])
  invitedBy           User?         @relation("UserInvitations", fields: [invitedByUserId], references: [id])
  invitedUsers        User[]        @relation("UserInvitations")
  createdInvitations  InvitationLink[] @relation("InvitationCreator")
  usedInvitation      InvitationLink?  @relation("InvitationUsage")
  createdGeometries   NamedGeometry[]
  createdApiKeys      ApiKey[]      @relation("CreatedApiKeys")
  createdGeometryJobs GeometryProcessingQueue[] @relation("CreatedGeometryJobs")
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model InvitationLink {
  id              String    @id @default(cuid())
  token           String    @unique @default(cuid())
  email           String?   // For targeted invites
  expiresAt       DateTime
  usedAt          DateTime?
  
  organizationId  String
  createdByUserId String
  usedByUserId    String?   @unique
  
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdBy       User         @relation("InvitationCreator", fields: [createdByUserId], references: [id])
  usedBy          User?        @relation("InvitationUsage", fields: [usedByUserId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model NamedGeometry {
  id                              String   @id @default(cuid())
  GeometryName                    String   @unique
  GeometryAlgorithmName           String
  GeometryInputParameterSchema    String   // JSON string conforming to geometry-input-parameter-schema.json
  CreatorID                       String   // References User.id
  CreationTime                    DateTime @default(now())
  
  creator                         User     @relation(fields: [CreatorID], references: [id])
  geometryJobs                    GeometryProcessingQueue[] @relation("NamedGeometryJobs")
  
  @@map("NamedGeometry")
}

model ApiKey {
  id             String    @id @default(cuid())
  name           String    // Descriptive name for the API key
  keyHash        String    @unique // bcrypt hash of the actual API key
  permissions    String    // JSON array of permission strings
  organizationId String?   // Optional reference to Organization, null = access to all orgs
  isActive       Boolean   @default(true)
  lastUsedAt     DateTime? // Last successful authentication
  createdAt      DateTime  @default(now())
  createdBy      String    // References User.id
  
  organization   Organization? @relation(fields: [organizationId], references: [id])
  creator        User          @relation("CreatedApiKeys", fields: [createdBy], references: [id])
}

model GeometryProcessingQueue {
  id                          String    @id @default(cuid())
  GeometryID                  String    // References NamedGeometry.id
  CreatorID                   String    // References User.id
  OwningOrganizationID        String    // References Organization.id
  CreationTime                DateTime  @default(now())
  GeometryInputParameterData  String    // JSON data conforming to GeometryInputParameterSchema
  ProcessStartedTime          DateTime? // When processing first attempted
  ProcessCompletedTime        DateTime? // When processing finished
  isProcessSuccessful         Boolean   @default(false)
  isEnabled                   Boolean   @default(true)
  CustomerNote                String?   // Up to 500 characters
  CustomerID                  String?   // Up to 20 characters
  // New: Files produced by geometry processing are stored on this record
  GeometryFileContents        Bytes?    // 3MF/STL/OBJ/3MF binary data
  GeometryFileName            String?   // Name of the geometry file
  PrintFileContents           Bytes?    // Print file (e.g., 3MF containing gcode) binary data
  PrintFileName               String?   // Name of the print file
  
  geometry                    NamedGeometry @relation("NamedGeometryJobs", fields: [GeometryID], references: [id])
  creator                     User          @relation("CreatedGeometryJobs", fields: [CreatorID], references: [id])
  owningOrganization          Organization  @relation(fields: [OwningOrganizationID], references: [id])
  printQueue                  PrintQueue[]
}

model PrintQueue {
  id                          String    @id @default(cuid())
  GeometryProcessingQueueID   String    // References GeometryProcessingQueue.id
  PrintStartedTime            DateTime? // When print was first attempted
  PrintCompletedTime          DateTime? // When print was finished
  isPrintSuccessful           Boolean   @default(false)
  
  geometryProcessingQueue     GeometryProcessingQueue @relation(fields: [GeometryProcessingQueueID], references: [id])
}

enum UserRole {
  SYSTEM_ADMIN
  ORG_ADMIN  
  MEMBER
}
